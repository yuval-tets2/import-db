/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTeamscoreCopyArgs } from "./CreateTeamscoreCopyArgs";
import { UpdateTeamscoreCopyArgs } from "./UpdateTeamscoreCopyArgs";
import { DeleteTeamscoreCopyArgs } from "./DeleteTeamscoreCopyArgs";
import { TeamscoreCopyCountArgs } from "./TeamscoreCopyCountArgs";
import { TeamscoreCopyFindManyArgs } from "./TeamscoreCopyFindManyArgs";
import { TeamscoreCopyFindUniqueArgs } from "./TeamscoreCopyFindUniqueArgs";
import { TeamscoreCopy } from "./TeamscoreCopy";
import { TeamscoreCopyService } from "../teamscoreCopy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TeamscoreCopy)
export class TeamscoreCopyResolverBase {
  constructor(
    protected readonly service: TeamscoreCopyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "read",
    possession: "any",
  })
  async _teamscoreCopiesMeta(
    @graphql.Args() args: TeamscoreCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TeamscoreCopy])
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "read",
    possession: "any",
  })
  async teamscoreCopies(
    @graphql.Args() args: TeamscoreCopyFindManyArgs
  ): Promise<TeamscoreCopy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TeamscoreCopy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "read",
    possession: "own",
  })
  async teamscoreCopy(
    @graphql.Args() args: TeamscoreCopyFindUniqueArgs
  ): Promise<TeamscoreCopy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamscoreCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "create",
    possession: "any",
  })
  async createTeamscoreCopy(
    @graphql.Args() args: CreateTeamscoreCopyArgs
  ): Promise<TeamscoreCopy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamscoreCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "update",
    possession: "any",
  })
  async updateTeamscoreCopy(
    @graphql.Args() args: UpdateTeamscoreCopyArgs
  ): Promise<TeamscoreCopy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamscoreCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamscoreCopy",
    action: "delete",
    possession: "any",
  })
  async deleteTeamscoreCopy(
    @graphql.Args() args: DeleteTeamscoreCopyArgs
  ): Promise<TeamscoreCopy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
