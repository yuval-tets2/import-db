/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTeamCopyArgs } from "./CreateTeamCopyArgs";
import { UpdateTeamCopyArgs } from "./UpdateTeamCopyArgs";
import { DeleteTeamCopyArgs } from "./DeleteTeamCopyArgs";
import { TeamCopyCountArgs } from "./TeamCopyCountArgs";
import { TeamCopyFindManyArgs } from "./TeamCopyFindManyArgs";
import { TeamCopyFindUniqueArgs } from "./TeamCopyFindUniqueArgs";
import { TeamCopy } from "./TeamCopy";
import { TeamCopyService } from "../teamCopy.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TeamCopy)
export class TeamCopyResolverBase {
  constructor(
    protected readonly service: TeamCopyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "read",
    possession: "any",
  })
  async _teamCopiesMeta(
    @graphql.Args() args: TeamCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TeamCopy])
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "read",
    possession: "any",
  })
  async teamCopies(
    @graphql.Args() args: TeamCopyFindManyArgs
  ): Promise<TeamCopy[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TeamCopy, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "read",
    possession: "own",
  })
  async teamCopy(
    @graphql.Args() args: TeamCopyFindUniqueArgs
  ): Promise<TeamCopy | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "create",
    possession: "any",
  })
  async createTeamCopy(
    @graphql.Args() args: CreateTeamCopyArgs
  ): Promise<TeamCopy> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TeamCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "update",
    possession: "any",
  })
  async updateTeamCopy(
    @graphql.Args() args: UpdateTeamCopyArgs
  ): Promise<TeamCopy | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeamCopy)
  @nestAccessControl.UseRoles({
    resource: "TeamCopy",
    action: "delete",
    possession: "any",
  })
  async deleteTeamCopy(
    @graphql.Args() args: DeleteTeamCopyArgs
  ): Promise<TeamCopy | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
