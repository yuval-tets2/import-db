/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateScoreArgs } from "./CreateScoreArgs";
import { UpdateScoreArgs } from "./UpdateScoreArgs";
import { DeleteScoreArgs } from "./DeleteScoreArgs";
import { ScoreCountArgs } from "./ScoreCountArgs";
import { ScoreFindManyArgs } from "./ScoreFindManyArgs";
import { ScoreFindUniqueArgs } from "./ScoreFindUniqueArgs";
import { Score } from "./Score";
import { Member } from "../../member/base/Member";
import { Schedule } from "../../schedule/base/Schedule";
import { ScoreService } from "../score.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Score)
export class ScoreResolverBase {
  constructor(
    protected readonly service: ScoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async _scoresMeta(
    @graphql.Args() args: ScoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Score])
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "any",
  })
  async scores(@graphql.Args() args: ScoreFindManyArgs): Promise<Score[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Score, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "read",
    possession: "own",
  })
  async score(
    @graphql.Args() args: ScoreFindUniqueArgs
  ): Promise<Score | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Score)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "create",
    possession: "any",
  })
  async createScore(@graphql.Args() args: CreateScoreArgs): Promise<Score> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        members: {
          connect: args.data.members,
        },

        schedule: {
          connect: args.data.schedule,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Score)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "update",
    possession: "any",
  })
  async updateScore(
    @graphql.Args() args: UpdateScoreArgs
  ): Promise<Score | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          members: {
            connect: args.data.members,
          },

          schedule: {
            connect: args.data.schedule,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Score)
  @nestAccessControl.UseRoles({
    resource: "Score",
    action: "delete",
    possession: "any",
  })
  async deleteScore(
    @graphql.Args() args: DeleteScoreArgs
  ): Promise<Score | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Member, {
    nullable: true,
    name: "members",
  })
  @nestAccessControl.UseRoles({
    resource: "Member",
    action: "read",
    possession: "any",
  })
  async resolveFieldMembers(
    @graphql.Parent() parent: Score
  ): Promise<Member | null> {
    const result = await this.service.getMembers(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Schedule, {
    nullable: true,
    name: "schedule",
  })
  @nestAccessControl.UseRoles({
    resource: "Schedule",
    action: "read",
    possession: "any",
  })
  async resolveFieldSchedule(
    @graphql.Parent() parent: Score
  ): Promise<Schedule | null> {
    const result = await this.service.getSchedule(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
