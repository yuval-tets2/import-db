/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSeasonCourseArgs } from "./CreateSeasonCourseArgs";
import { UpdateSeasonCourseArgs } from "./UpdateSeasonCourseArgs";
import { DeleteSeasonCourseArgs } from "./DeleteSeasonCourseArgs";
import { SeasonCourseCountArgs } from "./SeasonCourseCountArgs";
import { SeasonCourseFindManyArgs } from "./SeasonCourseFindManyArgs";
import { SeasonCourseFindUniqueArgs } from "./SeasonCourseFindUniqueArgs";
import { SeasonCourse } from "./SeasonCourse";
import { Course } from "../../course/base/Course";
import { Season } from "../../season/base/Season";
import { SeasonCourseService } from "../seasonCourse.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SeasonCourse)
export class SeasonCourseResolverBase {
  constructor(
    protected readonly service: SeasonCourseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "read",
    possession: "any",
  })
  async _seasonCoursesMeta(
    @graphql.Args() args: SeasonCourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SeasonCourse])
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "read",
    possession: "any",
  })
  async seasonCourses(
    @graphql.Args() args: SeasonCourseFindManyArgs
  ): Promise<SeasonCourse[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SeasonCourse, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "read",
    possession: "own",
  })
  async seasonCourse(
    @graphql.Args() args: SeasonCourseFindUniqueArgs
  ): Promise<SeasonCourse | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeasonCourse)
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "create",
    possession: "any",
  })
  async createSeasonCourse(
    @graphql.Args() args: CreateSeasonCourseArgs
  ): Promise<SeasonCourse> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        course: {
          connect: args.data.course,
        },

        season: {
          connect: args.data.season,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SeasonCourse)
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "update",
    possession: "any",
  })
  async updateSeasonCourse(
    @graphql.Args() args: UpdateSeasonCourseArgs
  ): Promise<SeasonCourse | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          course: {
            connect: args.data.course,
          },

          season: {
            connect: args.data.season,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SeasonCourse)
  @nestAccessControl.UseRoles({
    resource: "SeasonCourse",
    action: "delete",
    possession: "any",
  })
  async deleteSeasonCourse(
    @graphql.Args() args: DeleteSeasonCourseArgs
  ): Promise<SeasonCourse | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async resolveFieldCourse(
    @graphql.Parent() parent: SeasonCourse
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Season, {
    nullable: true,
    name: "season",
  })
  @nestAccessControl.UseRoles({
    resource: "Season",
    action: "read",
    possession: "any",
  })
  async resolveFieldSeason(
    @graphql.Parent() parent: SeasonCourse
  ): Promise<Season | null> {
    const result = await this.service.getSeason(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
