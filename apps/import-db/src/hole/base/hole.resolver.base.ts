/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHoleArgs } from "./CreateHoleArgs";
import { UpdateHoleArgs } from "./UpdateHoleArgs";
import { DeleteHoleArgs } from "./DeleteHoleArgs";
import { HoleCountArgs } from "./HoleCountArgs";
import { HoleFindManyArgs } from "./HoleFindManyArgs";
import { HoleFindUniqueArgs } from "./HoleFindUniqueArgs";
import { Hole } from "./Hole";
import { Tee } from "../../tee/base/Tee";
import { HoleService } from "../hole.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Hole)
export class HoleResolverBase {
  constructor(
    protected readonly service: HoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "read",
    possession: "any",
  })
  async _holesMeta(
    @graphql.Args() args: HoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Hole])
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "read",
    possession: "any",
  })
  async holes(@graphql.Args() args: HoleFindManyArgs): Promise<Hole[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Hole, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "read",
    possession: "own",
  })
  async hole(@graphql.Args() args: HoleFindUniqueArgs): Promise<Hole | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hole)
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "create",
    possession: "any",
  })
  async createHole(@graphql.Args() args: CreateHoleArgs): Promise<Hole> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        tee: {
          connect: args.data.tee,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Hole)
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "update",
    possession: "any",
  })
  async updateHole(@graphql.Args() args: UpdateHoleArgs): Promise<Hole | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          tee: {
            connect: args.data.tee,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Hole)
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "delete",
    possession: "any",
  })
  async deleteHole(@graphql.Args() args: DeleteHoleArgs): Promise<Hole | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tee, {
    nullable: true,
    name: "tee",
  })
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "read",
    possession: "any",
  })
  async resolveFieldTee(@graphql.Parent() parent: Hole): Promise<Tee | null> {
    const result = await this.service.getTee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
