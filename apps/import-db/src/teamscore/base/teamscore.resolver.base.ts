/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTeamscoreArgs } from "./CreateTeamscoreArgs";
import { UpdateTeamscoreArgs } from "./UpdateTeamscoreArgs";
import { DeleteTeamscoreArgs } from "./DeleteTeamscoreArgs";
import { TeamscoreCountArgs } from "./TeamscoreCountArgs";
import { TeamscoreFindManyArgs } from "./TeamscoreFindManyArgs";
import { TeamscoreFindUniqueArgs } from "./TeamscoreFindUniqueArgs";
import { Teamscore } from "./Teamscore";
import { Team } from "../../team/base/Team";
import { TeamscoreService } from "../teamscore.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Teamscore)
export class TeamscoreResolverBase {
  constructor(
    protected readonly service: TeamscoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "read",
    possession: "any",
  })
  async _teamscoresMeta(
    @graphql.Args() args: TeamscoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Teamscore])
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "read",
    possession: "any",
  })
  async teamscores(
    @graphql.Args() args: TeamscoreFindManyArgs
  ): Promise<Teamscore[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Teamscore, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "read",
    possession: "own",
  })
  async teamscore(
    @graphql.Args() args: TeamscoreFindUniqueArgs
  ): Promise<Teamscore | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Teamscore)
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "create",
    possession: "any",
  })
  async createTeamscore(
    @graphql.Args() args: CreateTeamscoreArgs
  ): Promise<Teamscore> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        team: args.data.team
          ? {
              connect: args.data.team,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Teamscore)
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "update",
    possession: "any",
  })
  async updateTeamscore(
    @graphql.Args() args: UpdateTeamscoreArgs
  ): Promise<Teamscore | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          team: args.data.team
            ? {
                connect: args.data.team,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Teamscore)
  @nestAccessControl.UseRoles({
    resource: "Teamscore",
    action: "delete",
    possession: "any",
  })
  async deleteTeamscore(
    @graphql.Args() args: DeleteTeamscoreArgs
  ): Promise<Teamscore | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Team, {
    nullable: true,
    name: "team",
  })
  @nestAccessControl.UseRoles({
    resource: "Team",
    action: "read",
    possession: "any",
  })
  async resolveFieldTeam(
    @graphql.Parent() parent: Teamscore
  ): Promise<Team | null> {
    const result = await this.service.getTeam(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
