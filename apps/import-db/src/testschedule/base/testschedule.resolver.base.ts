/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTestscheduleArgs } from "./CreateTestscheduleArgs";
import { UpdateTestscheduleArgs } from "./UpdateTestscheduleArgs";
import { DeleteTestscheduleArgs } from "./DeleteTestscheduleArgs";
import { TestscheduleCountArgs } from "./TestscheduleCountArgs";
import { TestscheduleFindManyArgs } from "./TestscheduleFindManyArgs";
import { TestscheduleFindUniqueArgs } from "./TestscheduleFindUniqueArgs";
import { Testschedule } from "./Testschedule";
import { TestscheduleService } from "../testschedule.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Testschedule)
export class TestscheduleResolverBase {
  constructor(
    protected readonly service: TestscheduleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "read",
    possession: "any",
  })
  async _testschedulesMeta(
    @graphql.Args() args: TestscheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Testschedule])
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "read",
    possession: "any",
  })
  async testschedules(
    @graphql.Args() args: TestscheduleFindManyArgs
  ): Promise<Testschedule[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Testschedule, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "read",
    possession: "own",
  })
  async testschedule(
    @graphql.Args() args: TestscheduleFindUniqueArgs
  ): Promise<Testschedule | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testschedule)
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "create",
    possession: "any",
  })
  async createTestschedule(
    @graphql.Args() args: CreateTestscheduleArgs
  ): Promise<Testschedule> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Testschedule)
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "update",
    possession: "any",
  })
  async updateTestschedule(
    @graphql.Args() args: UpdateTestscheduleArgs
  ): Promise<Testschedule | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Testschedule)
  @nestAccessControl.UseRoles({
    resource: "Testschedule",
    action: "delete",
    possession: "any",
  })
  async deleteTestschedule(
    @graphql.Args() args: DeleteTestscheduleArgs
  ): Promise<Testschedule | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
