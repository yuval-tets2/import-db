/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTeeArgs } from "./CreateTeeArgs";
import { UpdateTeeArgs } from "./UpdateTeeArgs";
import { DeleteTeeArgs } from "./DeleteTeeArgs";
import { TeeCountArgs } from "./TeeCountArgs";
import { TeeFindManyArgs } from "./TeeFindManyArgs";
import { TeeFindUniqueArgs } from "./TeeFindUniqueArgs";
import { Tee } from "./Tee";
import { HoleFindManyArgs } from "../../hole/base/HoleFindManyArgs";
import { Hole } from "../../hole/base/Hole";
import { Course } from "../../course/base/Course";
import { TeeService } from "../tee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tee)
export class TeeResolverBase {
  constructor(
    protected readonly service: TeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "read",
    possession: "any",
  })
  async _teesMeta(
    @graphql.Args() args: TeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tee])
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "read",
    possession: "any",
  })
  async tees(@graphql.Args() args: TeeFindManyArgs): Promise<Tee[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "read",
    possession: "own",
  })
  async tee(@graphql.Args() args: TeeFindUniqueArgs): Promise<Tee | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tee)
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "create",
    possession: "any",
  })
  async createTee(@graphql.Args() args: CreateTeeArgs): Promise<Tee> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tee)
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "update",
    possession: "any",
  })
  async updateTee(@graphql.Args() args: UpdateTeeArgs): Promise<Tee | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tee)
  @nestAccessControl.UseRoles({
    resource: "Tee",
    action: "delete",
    possession: "any",
  })
  async deleteTee(@graphql.Args() args: DeleteTeeArgs): Promise<Tee | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Hole], { name: "hole" })
  @nestAccessControl.UseRoles({
    resource: "Hole",
    action: "read",
    possession: "any",
  })
  async resolveFieldHole(
    @graphql.Parent() parent: Tee,
    @graphql.Args() args: HoleFindManyArgs
  ): Promise<Hole[]> {
    const results = await this.service.findHole(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async resolveFieldCourse(
    @graphql.Parent() parent: Tee
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
