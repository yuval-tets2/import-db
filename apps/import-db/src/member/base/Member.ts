/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Matchscore } from "../../matchscore/base/Matchscore";
import {
  ValidateNested,
  IsOptional,
  IsInt,
  IsString,
  IsEnum,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumMemberTee } from "./EnumMemberTee";
import { Score } from "../../score/base/Score";
import { Team } from "../../team/base/Team";

@ObjectType()
class Member {
  @ApiProperty({
    required: false,
    type: () => [Matchscore],
  })
  @ValidateNested()
  @Type(() => Matchscore)
  @IsOptional()
  matchscore?: Array<Matchscore>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  id!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  lname!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fname!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  active!: string;

  @ApiProperty({
    required: true,
    enum: EnumMemberTee,
  })
  @IsEnum(EnumMemberTee)
  @Field(() => EnumMemberTee, {
    nullable: true,
  })
  tee?: "MEN" | "SENIOR" | "LADIES";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  ghin!: string;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  createdAt!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  updatedAt!: Date | null;

  @ApiProperty({
    required: false,
    type: () => [Score],
  })
  @ValidateNested()
  @Type(() => Score)
  @IsOptional()
  scores?: Array<Score>;

  @ApiProperty({
    required: false,
    type: () => [Team],
  })
  @ValidateNested()
  @Type(() => Team)
  @IsOptional()
  team?: Array<Team>;
}

export { Member as Member };
