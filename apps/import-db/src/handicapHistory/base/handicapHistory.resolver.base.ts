/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHandicapHistoryArgs } from "./CreateHandicapHistoryArgs";
import { UpdateHandicapHistoryArgs } from "./UpdateHandicapHistoryArgs";
import { DeleteHandicapHistoryArgs } from "./DeleteHandicapHistoryArgs";
import { HandicapHistoryCountArgs } from "./HandicapHistoryCountArgs";
import { HandicapHistoryFindManyArgs } from "./HandicapHistoryFindManyArgs";
import { HandicapHistoryFindUniqueArgs } from "./HandicapHistoryFindUniqueArgs";
import { HandicapHistory } from "./HandicapHistory";
import { HandicapHistoryService } from "../handicapHistory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => HandicapHistory)
export class HandicapHistoryResolverBase {
  constructor(
    protected readonly service: HandicapHistoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "read",
    possession: "any",
  })
  async _handicapHistoriesMeta(
    @graphql.Args() args: HandicapHistoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [HandicapHistory])
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "read",
    possession: "any",
  })
  async handicapHistories(
    @graphql.Args() args: HandicapHistoryFindManyArgs
  ): Promise<HandicapHistory[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => HandicapHistory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "read",
    possession: "own",
  })
  async handicapHistory(
    @graphql.Args() args: HandicapHistoryFindUniqueArgs
  ): Promise<HandicapHistory | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HandicapHistory)
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "create",
    possession: "any",
  })
  async createHandicapHistory(
    @graphql.Args() args: CreateHandicapHistoryArgs
  ): Promise<HandicapHistory> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => HandicapHistory)
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "update",
    possession: "any",
  })
  async updateHandicapHistory(
    @graphql.Args() args: UpdateHandicapHistoryArgs
  ): Promise<HandicapHistory | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HandicapHistory)
  @nestAccessControl.UseRoles({
    resource: "HandicapHistory",
    action: "delete",
    possession: "any",
  })
  async deleteHandicapHistory(
    @graphql.Args() args: DeleteHandicapHistoryArgs
  ): Promise<HandicapHistory | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
